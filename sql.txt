CREATE SCHEMA db;

CREATE TABLE db.user (
    email VARCHAR(128) NOT NULL,
    pass VARCHAR(128) NOT NULL,
    full_name VARCHAR(128) NOT NULL,
    PRIMARY KEY (email)
);

CREATE TABLE db.course (
    id INT NOT NULL AUTO_INCREMENT,
    title VARCHAR(128) NOT NULL,
    term VARCHAR(128) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE db.folder (
    id INTEGER NOT NULL AUTO_INCREMENT,
    course_id INTEGER NOT NULL,
    root_folder_id INTEGER,
    title VARCHAR(128) DEFAULT 'No name',
    PRIMARY KEY (id),
    FOREIGN KEY (course_id)
        REFERENCES course (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (root_folder_id)
        REFERENCES folder (id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE db.thread (
    id INTEGER NOT NULL AUTO_INCREMENT,
    folder_id INTEGER NOT NULL,
    user_id VARCHAR(128) NOT NULL,
    title VARCHAR(128) DEFAULT 'No title',
    tag VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (folder_id)
        REFERENCES folder (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_id)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE db.post (
    id INTEGER NOT NULL AUTO_INCREMENT,
    thread_id INTEGER NOT NULL,
    root_post_id INTEGER,
    user_id VARCHAR(128) NOT NULL,
    body TEXT,
    anonymous_post INTEGER DEFAULT 0,
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (thread_id)
        REFERENCES thread (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (root_post_id)
        REFERENCES post (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_id)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE db.user_in_course (
    user_id VARCHAR(500) NOT NULL,
    course_id INTEGER NOT NULL,
    user_type VARCHAR(50) NOT NULL DEFAULT 'Student',
    PRIMARY KEY (user_id , course_id),
    FOREIGN KEY (user_id)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (course_id)
        REFERENCES course (id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE db.user_likes_post (
    id INTEGER NOT NULL AUTO_INCREMENT,
    post_id INTEGER NOT NULL,
    user_id VARCHAR(128),
    PRIMARY KEY (id),
    FOREIGN KEY (post_id)
        REFERENCES post (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_id)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE db.user_read_post (
    id INTEGER NOT NULL AUTO_INCREMENT,
    thread_id INTEGER NOT NULL,
    user_id VARCHAR(128),
    PRIMARY KEY (id),
    FOREIGN KEY (thread_id)
        REFERENCES thread (id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_id)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE SET NULL
);

-- insert users
INSERT INTO db.user(email, pass, full_name) VALUES ('nicolas@test.no', 'pass', 'Nicolas');
INSERT INTO db.user(email, pass, full_name) VALUES ('marcus@test.no', 'pass', 'Marcus');
INSERT INTO db.user(email, pass, full_name) VALUES ('kai@test.no', 'pass', 'Kai');
INSERT INTO db.user(email, pass, full_name) VALUES ('borg@test.no', 'pass', 'Borg');
INSERT INTO db.user(email, pass, full_name) VALUES ('preben@test.no', 'pass', 'Preben');
INSERT INTO db.user(email, pass, full_name) VALUES ('alex@test.no', 'pass', 'Alex');
INSERT INTO db.user(email, pass, full_name) VALUES ('serg@test.no', 'pass', 'Serv');

-- insert test course
INSERT INTO db.course (title, term) VALUES ('testcourse', 'høst2918');
INSERT INTO db.course (title, term) VALUES ('newcourse', 'våren2021');

-- insert test folder
INSERT INTO db.folder(course_id, title) VALUES (1, 'exam');
INSERT INTO db.folder(course_id, title) VALUES (1, 'tasks');
INSERT INTO db.folder(course_id, title) VALUES (2, 'øving');
INSERT INTO db.folder(course_id, title) VALUES (2, 'qa');
INSERT INTO db.folder(course_id, title, root_folder_id) VALUES (1, 'exam2020', 1);

-- insert threads
INSERT INTO db.thread (folder_id, user_id, title, tag) VALUES (1, 'nicolas@test.no', 'Exam date?', 'question');
INSERT INTO db.thread (folder_id, user_id, title, tag) VALUES (2, 'marcus@test.no', 'What task?', 'question');
INSERT INTO db.thread (folder_id, user_id, title, tag) VALUES (3, 'kai@test.no', 'When is due date', 'announcement');
INSERT INTO db.thread (folder_id, user_id, title, tag) VALUES (4, 'preben@test.no', 'Some qa', 'lecture');

-- insert posts
INSERT INTO db.post (thread_id, user_id, body) VALUES (1, 'nicolas@test.no', 'This is some dummy text.');
INSERT INTO db.post (thread_id, user_id, body) VALUES (1, 'kai@test.no', 'This is some dummy text.');
INSERT INTO db.post (thread_id, user_id, body) VALUES (1, 'marcus@test.no', 'This is some dummy text.');
INSERT INTO db.post (thread_id, user_id, body) VALUES (2, 'preben@test.no', 'This is some dummy text.');
INSERT INTO db.post (thread_id, user_id, body) VALUES (2, 'serg@test.no', 'This is some dummy text.');

-- insert participates_in_course
INSERT INTO db.user_in_course(user_id, course_id, user_type) VALUES ('nicolas@test.no',1, 'admin');
INSERT INTO db.user_in_course(user_id, course_id) VALUES ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',1), ('preben@test.no',1), ('alex@test.no',1), ('serg@test.no',1);

-- insert into user_likes_post
INSERT INTO db.user_likes_post(user_id, post_id) VALUES ('nicolas@test.no',1), ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',2), ('preben@test.no',2), ('alex@test.no',3), ('serg@test.no',4);

-- insert into has_read
INSERT INTO db.user_read_post(user_id, thread_id) VALUES ('nicolas@test.no',1), ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',2), ('preben@test.no',2), ('alex@test.no',3), ('serg@test.no',4);