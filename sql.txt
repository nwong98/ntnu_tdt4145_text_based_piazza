CREATE SCHEMA db;

CREATE TABLE db.user (
    email VARCHAR(128) NOT NULL,
    pass VARCHAR(128) NOT NULL,
    full_name VARCHAR(128) NOT NULL,
    user_type VARCHAR(128) NOT NULL DEFAULT 'participant',
    PRIMARY KEY (email)
);

CREATE TABLE db.course (
    course_id INT NOT NULL AUTO_INCREMENT,
    course_name VARCHAR(128) NOT NULL,
    term VARCHAR(128) NOT NULL,
    PRIMARY KEY (course_id)
);

CREATE TABLE db.folder (
    folder_id INTEGER NOT NULL AUTO_INCREMENT,
    course_id INTEGER NOT NULL,
    folder_name VARCHAR(128) DEFAULT 'No name',
    parent_folder INTEGER,
    PRIMARY KEY (folder_id),
    FOREIGN KEY (course_id)
        REFERENCES course (course_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (parent_folder)
        REFERENCES folder (folder_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE db.post (
    post_id INTEGER NOT NULL AUTO_INCREMENT,
    parent_post INTEGER,
    folder_id INTEGER NOT NULL,
    email VARCHAR(128),
    title VARCHAR(128) DEFAULT 'No title',
    content TEXT,
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tag VARCHAR(20),
    anonymous_post INTEGER DEFAULT 0,
    color_status VARCHAR(10) DEFAULT 'RED',
    PRIMARY KEY (post_id),
    FOREIGN KEY (email)
        REFERENCES user (email)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (folder_id)
        REFERENCES folder (folder_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (parent_post)
        REFERENCES post (post_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE db.replies (
    main_post INTEGER NOT NULL,
    reply_post INTEGER NOT NULL,
    PRIMARY KEY (main_post, reply_post),
    FOREIGN KEY (main_post)
        REFERENCES post (post_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (reply_post)
        REFERENCES post (post_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE db.participates_in_course (
    email VARCHAR(500) NOT NULL,
    course_id INTEGER NOT NULL,
    PRIMARY KEY (email , course_id),
    FOREIGN KEY (email)
        REFERENCES user (email)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (course_id)
        REFERENCES course (course_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE db.user_likes_post (
	like_id INTEGER NOT NULL AUTO_INCREMENT,
    email VARCHAR(500),
    post_id INTEGER NOT NULL,
    PRIMARY KEY (like_id),
    FOREIGN KEY (email)
        REFERENCES user (email)
        ON UPDATE CASCADE
        ON DELETE SET NULL, -- kan slette bruker, men fortsatt telle likes.
    FOREIGN KEY (post_id)
        REFERENCES post (post_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE db.has_read (
    read_id INTEGER NOT NULL AUTO_INCREMENT,
    email VARCHAR(500),
    post_id INTEGER NOT NULL,
    PRIMARY KEY (read_id),
    FOREIGN KEY (email)
        REFERENCES user (email)
        ON UPDATE CASCADE ON DELETE SET NULL, -- kan slette bruker, men fortsatt telle visning.
    FOREIGN KEY (post_id)
        REFERENCES post (post_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- insert users
INSERT INTO db.user(email, pass, full_name, user_type) VALUES ('nicolas@test.no', 'pass', 'Nicolas', 'admin');
INSERT INTO db.user(email, pass, full_name) VALUES ('marcus@test.no', 'pass', 'Marcus');
INSERT INTO db.user(email, pass, full_name) VALUES ('kai@test.no', 'pass', 'Kai');
INSERT INTO db.user(email, pass, full_name) VALUES ('borg@test.no', 'pass', 'Borg');
INSERT INTO db.user(email, pass, full_name) VALUES ('preben@test.no', 'pass', 'Preben');
INSERT INTO db.user(email, pass, full_name) VALUES ('alex@test.no', 'pass', 'Alex');
INSERT INTO db.user(email, pass, full_name) VALUES ('serg@test.no', 'pass', 'Serv');

-- insert test course
INSERT INTO db.course VALUES (1, 'testcourse', 'høst2918');
INSERT INTO db.course VALUES (2, 'newcourse', 'våren2021');

-- insert test folder
INSERT INTO db.folder(course_id, folder_name) VALUES (1, 'exam');
INSERT INTO db.folder(course_id, folder_name) VALUES (1, 'tasks');
INSERT INTO db.folder(course_id, folder_name) VALUES (1, 'øving');
INSERT INTO db.folder(course_id, folder_name) VALUES (1, 'qa');
INSERT INTO db.folder(course_id, folder_name, parent_folder) VALUES (1, 'exam2020', 1);

-- insert test post
INSERT INTO db.post(folder_id, email, title, content) VALUES (1,'nicolas@test.no', 'How to solve question 1?', 'I am not sure on this!');
INSERT INTO db.post(folder_id, email, title, content) VALUES (2,'kai@test.no', 'How to solve question 2', 'This was easy!');
INSERT INTO db.post(folder_id, email, title, content) VALUES (3,'kai@test.no', 'How to install Mysql?', 'This was hard!');
INSERT INTO db.post(folder_id, email, title, content) VALUES (3,'kai@test.no', 'How to solve øving 2', 'This was cool!');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (1, 1,'alex@test.no', 'awef', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (1, 1,'serg@test.no', 'vrae', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (2, 2,'preben@test.no', 'erag', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (2, 2,'kai@test.no', 'erag', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (2, 2,'nicolas@test.no', 'erag', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (3, 3,'marcus@test.no', 'erag', 'wooow');
INSERT INTO db.post(parent_post, folder_id, email, title, content) VALUES (3, 3,'preben@test.no', 'erag', 'wooow');

-- insert replies
INSERT INTO db.replies(main_post, reply_post)
SELECT parent_post AS main_post, post_id AS reply_post
FROM db.post
WHERE parent_post IS NOT NULL;

-- insert participates_in_course
INSERT INTO db.participates_in_course(email, course_id) VALUES ('nicolas@test.no',1), ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',1), ('preben@test.no',1), ('alex@test.no',1), ('serg@test.no',1);

-- insert into user_likes_post
INSERT INTO db.user_likes_post(email, post_id) VALUES ('nicolas@test.no',1), ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',2), ('preben@test.no',2), ('alex@test.no',3), ('serg@test.no',4), ('kai@test.no',7), ('borg@test.no',7);

-- insert into has_read
INSERT INTO db.has_read(email, post_id) VALUES ('nicolas@test.no',1), ('marcus@test.no',1), ('kai@test.no',1), ('borg@test.no',2), ('preben@test.no',2), ('alex@test.no',3), ('serg@test.no',4), ('kai@test.no',7), ('borg@test.no',7);